// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  username String? @unique
  email     String?   @unique
  password      String
  answers AssessmentAnswer[] @relation("answers")
  email_verified DateTime? @map(name: "email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  movimientos Calculator[]
}

model Question {
  id Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title String
  category Int 
  opciones Opcion[]
  

}

model Opcion {
  id Int @id @default(autoincrement())
  question Question @relation(fields: [questionId], references: [id])
  questionId Int
  createdAt DateTime @default(now())
  opcion String
}

model AssessmentAnswer {
id Int      @id @default(autoincrement())
user User @relation("answers", fields: [userId], references: [id])
userId Int
createdAt DateTime @default(now())
incomes String
percentfixedoutcomes Float
percentessentialoutcomes Float
percentexpendableoutcomes Float
objective1 String
objective2 String
objective3 String
}

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int @map(name: "user_id")
  compoundId         String    @unique @map(name: "compound_id")
  type               String @map(name: "provider_type")
  provider           String @map(name: "provider_id")
  providerAccountId  String @map(name: "provider_account_id")
  refresh_token      String?  @db.Text @map(name: "refresh_token")
  access_token       String?  @db.Text @map(name: "access_token")
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  userId       Int @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Calculator {
  id Int      @id @default(autoincrement())
  amount Float
  concept String?
  type String
  category String?
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  }
